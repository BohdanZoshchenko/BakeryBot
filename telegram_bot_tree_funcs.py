# this module is NOT UNIVERSAL for different bots
from modules import *
from settings import *

def set_user_state(chat_id, state):
    if state == None:
        state = [None, None, None]
    level = str(state[0])
    funnel = str(state[1])
    params = state[2]
    db_helper.do_sql(bot_tree["database"]["set_user_state"], 
                            [chat_id, level, funnel, params, level, funnel, params])

def get_user_state(chat_id):
    sql_result = db_helper.do_sql(
        bot_tree["database"]["get_user_state"], [chat_id])
    if len(sql_result) == 0:
        return None
    if len (sql_result[0]) != 3:
        return None
    state = [sql_result[0][0], sql_result[0][1], sql_result[0][2]]
    return state

async def form_order(chat_id):
    state = get_user_state(chat_id)
    sql =  "SELECT * FROM client_order WHERE client_id = %s AND sent = FALSE"
    sql_result = db_helper.do_sql(sql, [chat_id])
    if len(sql_result) > 0:
        sum = 0.0
        desc = ""
        for row in sql_result:
            sum += row[2]
            desc += row[1] + "\n"
        sum_text = desc + "*–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É " + price_format(sum) + " –ì–†–ù. + –¥–µ–∫–æ—Ä*\n"
        text = sum_text + "*–û–ë–û–í'–Ø–ó–ö–û–í–û* –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –π —á–∞—Å, –∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n–¢–æ—Ä—Ç/—á–∏–∑–∫–µ–π–∫ - 6-7 –¥–Ω—ñ–≤\n–ö–∞–ø–∫–µ–π–∫–∏ - 4-5 –¥–Ω—ñ–≤"
        inline_buttons = [
                        [ ["–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "cancel_orders"] ]
                     ]
        inline_keyboard = types.InlineKeyboardMarkup()
        rows = inline_buttons
        for row in rows:
            buttons_row = []
            for button in row:
                buttons_row.append(types.InlineKeyboardButton(
                    text=button[0], callback_data=button[1]))
            inline_keyboard.row(*buttons_row)
        markup = inline_keyboard
        await bot.send_message(chat_id, text, reply_markup = markup, parse_mode="Markdown") 
             

async def save_date(chat_id, param):
    sql =  "INSERT INTO client_data (chat_id, datetime) VALUES(%s,%s) ON CONFLICT (chat_id) DO UPDATE SET datetime = %s"
    db_helper.do_sql(sql, [chat_id, param, param])

async def save_phone(chat_id, param):
    sql =  "UPDATE client_data SET phone = %s WHERE chat_id = %s"
    db_helper.do_sql(sql, [param, chat_id])

async def finish_order(chat_id, param, message):
    sql =  "UPDATE client_data SET name = %s WHERE chat_id = %s"
    db_helper.do_sql(sql, [param, chat_id])


    text = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ó –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è –∫–æ–Ω–¥–∏—Ç–µ—Ä, —â–æ–± –≤—Å–µ –¥–µ—Ç–∞–ª—å–Ω–æ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏" 
    await bot.send_message(chat_id, text)
    text = "–•–æ—á–µ—Ç–µ —Å–º–∞–∫–æ–ª–∏–∫—ñ–≤ üßû?"
    inline_buttons = [
                        [ ["–ó–∞–º–æ–≤–∏—Ç–∏ —Å–º–∞–∫–æ–ª–∏–∫–∏", "order"] ],
                        [ ["–Ü–Ω—Ñ–æ", "info_in_telegram"] ]
                     ]
    inline_keyboard = types.InlineKeyboardMarkup()
    rows = inline_buttons
    for row in rows:
        buttons_row = []
        for button in row:
            buttons_row.append(types.InlineKeyboardButton(
                text=button[0], callback_data=button[1]))
        inline_keyboard.row(*buttons_row)
    markup = inline_keyboard
    await bot.send_message(chat_id, text, reply_markup=markup)

    await send_orders_to_admin(chat_id, message)

async def send_orders_to_admin(client_id, message):
    sql = "SELECT description, price FROM client_order WHERE client_id = %s AND sent = FALSE"
    orders = db_helper.do_sql(sql, [client_id])
    sum_order = ""
    sum = 0.0
    for row in orders:
        sum_order += row[0] + "\n"
        sum += row[1]
    sum_order += "*–í—Å—å–æ–≥–æ –Ω–∞ —Å—É–º—É: " + price_format(sum) + " –ì–†–ù" + " + –¥–µ–∫–æ—Ä*\n*Telegram:* @" + message.chat.username
    sql = "SELECT * FROM client_data WHERE chat_id = %s"
    sql_result = db_helper.do_sql(sql, [client_id])
    row = sql_result[0]
    sum_order += "\n*–í–∫–∞–∑–∞–Ω–∏–π —á–∞—Å:* " + sql_result[0][1]
    sum_order += "\n*–í–∫–∞–∑–∞–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:* " + sql_result[0][2]
    sum_order += "\n*–í–∫–∞–∑–∞–Ω–µ —ñ–º'—è:* " + sql_result[0][3]
    sql = "UPDATE client_data SET price = %s, order_desc = %s WHERE chat_id = %s"
    
    db_helper.do_sql(sql, [sum, sum_order, client_id])
    sql = "SELECT user_id FROM admin"
    admins =  db_helper.do_sql(sql, [])
    print("admin len" + str(len(admins)))
    for row in admins:
        print("admin:"+str(row[0]))
        text = sum_order
        await bot.send_message(row[0], text, parse_mode="Markdown")

    print("updating client_order")
    sql = "UPDATE client_order SET sent=TRUE WHERE client_id = %s AND sent = FALSE"
    db_helper.do_sql(sql, [client_id])
    print("updating 2")

async def show_categories(chat_id):
    sql = "SELECT category FROM item"
    result = db_helper.do_sql(sql, [])
    categories = []
    for row in result:
        if row[0] not in categories:
            categories.append(row[0])
    markup = types.InlineKeyboardMarkup()
    for category in categories:
        button = types.InlineKeyboardButton(
            text=str(category), callback_data="show_items%"+category)
        markup.add(button)
    await bot.send_message(chat_id, "–û–±–∏—Ä–∞–π—Ç–µ üßê", reply_markup=markup)


async def show_items(chat_id, param):
    sql = "SELECT name, price FROM item WHERE category=%s ORDER BY price"
    category = param[0]
    print(param)
    emoji = emojis[category]
    dim = dims[category]
    sql_result = db_helper.do_sql(sql, [category])
    items = sql_result
    markup = types.InlineKeyboardMarkup()
    for item in items:
        button = types.InlineKeyboardButton(
           emoji +' '+ item[0]+' '+str(item[1]) + ' ' + '–ì–†–ù/'+dim, callback_data='show_item%' + item[0])
        markup.add(button)
    await bot.send_message(chat_id, "–û–±–∏—Ä–∞–π—Ç–µ üßê", reply_markup=markup)


async def show_single_item(chat_id, param, sql_result):
    item = sql_result[0]
    category = item[4]
    text = '*'+param[0]+'*\n'
    text += str(item[1])+"\n" #description
    text += str("–¶—ñ–Ω–∞: " + str(item[3]) + " –ì–†–ù/" +dims[category]+" + –∑–∞ –¥–µ–∫–æ—Ä –æ–∫—Ä–µ–º–æ") + "\n"#price
    text += "–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –¥–µ–∫–æ—Ä –∑–∞ –≤–∞—à–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏" + "\n"
    if category == "–¢–æ—Ä—Ç–∏":
        text += "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è 2 –∫–≥"
    elif category == '–ö–∞–ø–∫–µ–π–∫–∏':
        text += "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è 6 —à—Ç"
    markup = types.InlineKeyboardMarkup()
    order_button = types.InlineKeyboardButton(
            '–ó–∞–º–æ–≤–∏—Ç–∏', callback_data=category+'%' + param[0])
    markup.add(order_button)
    info_button = types.InlineKeyboardButton(
            '–Ü–Ω—Ñ–æ', callback_data='info_in_telegram')
    back_button = types.InlineKeyboardButton(
            '–ù–∞–∑–∞–¥', callback_data='new_greeting')
    markup.row(info_button, back_button)
    await bot.send_photo(chat_id, item[2], caption=text, parse_mode="Markdown", reply_markup=markup)

async def order_item_start(chat_id, state):
    level = state[0]
    funnel = state[1]
    params = state[2]
    name = params[0]
    sql_res = db_helper.do_sql('SELECT category FROM item WHERE name=%s', [name])
    category = sql_res[0][0]
    if category == "–¢–æ—Ä—Ç–∏":
        text ="*"+name+"*\n–Ø–∫—É –≤–∞–≥—É –±–∞–∂–∞—î—Ç–µ (–≤—ñ–¥ 2 –¥–æ 102 –∫—ñ–ª–æ–≥—Ä–∞–º—ñ–≤ üòä)? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 3.25"
    elif category == '–ö–∞–ø–∫–µ–π–∫–∏':
        text ="*"+name+"*\n–Ø–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–∂–∞—î—Ç–µ (–≤—ñ–¥ 6 –¥–æ 106 —à—Ç—É–∫ üòä)? –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 10"
    await bot.send_message(chat_id, text, parse_mode="Markdown")

async def order_item_mass(chat_id, state, sql, param):
    level = state[0]
    funnel = state[1]
    params = state[2]
    name = params[0]
    mass = param

    res = db_helper.do_sql(sql, [name])
    price = res[0][0]
    category = res[0][1]
    sum = float(price)*float(mass)
    sum = price_format(sum)

    text = "*"+ name+"\n"
    text+= str(mass) + " "+dims[category]+" x " + str(price) + " = "
    text+= str(sum) + " –ì–†–ù + –∑–∞ –¥–µ–∫–æ—Ä –æ–∫—Ä–µ–º–æ*"

    sql = "INSERT INTO client_order VALUES(%s, %s, %s)"
    db_helper.do_sql(sql, [chat_id, text, float(sum)])
    text+="\n–ß—É–¥–æ–≤–æ! –í–∏ –∑–∞–º–æ–≤–∏—Ç–µ —â–µ —â–æ—Å—å —á–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ —Ç–µ, —â–æ —î?"

    inline_kb = types.InlineKeyboardMarkup(row_width=1)
    inline_kb.add(types.InlineKeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏ —â–µ', callback_data='order'))
    inline_kb.add(types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç–∏', callback_data='order_info'))

    await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=inline_kb)
    
async def cancel_orders(chat_id):
    sql = "DELETE FROM client_order WHERE client_id = %s AND sent = FALSE"
    db_helper.do_sql(sql, [chat_id])
    text = "–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
    inline_buttons = [
                        [ ["–ó–∞–º–æ–≤–∏—Ç–∏ —Å–º–∞–∫–æ–ª–∏–∫–∏", "order"] ],
                        [ ["–Ü–Ω—Ñ–æ", "info_in_telegram"] ]
                     ]
    inline_keyboard = types.InlineKeyboardMarkup()
    rows = inline_buttons
    for row in rows:
        buttons_row = []
        for button in row:
            buttons_row.append(types.InlineKeyboardButton(
                text=button[0], callback_data=button[1]))
        inline_keyboard.row(*buttons_row)
    markup = inline_keyboard
    await bot.send_message(chat_id, text, reply_markup=markup)

def price_format(price):
    price = float(price)
    price = round(price, 2)
    if not "." in str(price):
        return price
    price = str(price).split('.')
    while len(price[1]) < 2:
        price[1] += "0"
    price = price[0] + "." + price[1]
    return price

emojis= {'–ö–∞–ø–∫–µ–π–∫–∏' : 'üßÅ', '–¢–æ—Ä—Ç–∏':'üç∞'}
dims = {'–ö–∞–ø–∫–µ–π–∫–∏' : '–®–¢', '–¢–æ—Ä—Ç–∏':'–ö–ì'}
